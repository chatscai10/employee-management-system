# Docker Compose 監控堆疊配置
# 企業員工管理系統完整監控方案

version: '3.8'

services:
  # Prometheus 監控服務
  prometheus:
    image: prom/prometheus:latest
    container_name: employee-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - monitoring

  # Grafana 視覺化服務
  grafana:
    image: grafana/grafana:latest
    container_name: employee-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/var/lib/grafana/dashboards/employee-management.json
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123!
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    networks:
      - monitoring

  # AlertManager 警告管理
  alertmanager:
    image: prom/alertmanager:latest
    container_name: employee-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - monitoring

  # Node Exporter (系統監控)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: employee-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring

  # 企業員工管理系統主應用
  employee-management:
    build: .
    container_name: employee-management-app
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOSS_GROUP=${TELEGRAM_BOSS_GROUP}
      - TELEGRAM_EMPLOYEE_GROUP=${TELEGRAM_EMPLOYEE_GROUP}
      - GAS_WEB_APP_URL=${GAS_WEB_APP_URL}
      - PROMETHEUS_ENABLED=true
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - monitoring
      - app-network
    depends_on:
      - prometheus

  # Redis (可選 - 用於快取和 session)
  redis:
    image: redis:alpine
    container_name: employee-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

  # Nginx 反向代理 (可選)
  nginx:
    image: nginx:alpine
    container_name: employee-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - employee-management

# 數據卷配置
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  redis_data:
    driver: local

# 網路配置
networks:
  monitoring:
    driver: bridge
  app-network:
    driver: bridge