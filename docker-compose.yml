# 企業員工管理系統 - Docker Compose 配置
# 用於本地開發和測試環境

version: '3.8'

services:
  # 主應用程式
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: employee-management-app
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_BOSS_GROUP=${TELEGRAM_BOSS_GROUP:-}
      - TELEGRAM_EMPLOYEE_GROUP=${TELEGRAM_EMPLOYEE_GROUP:-}
      - DATABASE_URL=${DATABASE_URL:-}
    volumes:
      # 在開發模式下掛載源碼以支援熱重載
      - ./frontend:/app/frontend:ro
      - ./backend:/app/backend:ro
      - ./logs:/app/logs
    networks:
      - employee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres
      - redis

  # PostgreSQL 資料庫 (進階方案使用)
  postgres:
    image: postgres:15-alpine
    container_name: employee-management-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-employee_management}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - employee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-employee_management}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis 緩存 (用於 session 和快取)
  redis:
    image: redis:7-alpine
    container_name: employee-management-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - employee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx 反向代理 (生產環境使用)
  nginx:
    image: nginx:alpine
    container_name: employee-management-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - employee-network
    restart: unless-stopped
    depends_on:
      - app
    profiles:
      - production

  # Prometheus 監控
  prometheus:
    image: prom/prometheus:latest
    container_name: employee-management-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - employee-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana 視覺化
  grafana:
    image: grafana/grafana:latest
    container_name: employee-management-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - employee-network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Node Exporter (系統監控)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: employee-management-node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - employee-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Cadvisor (容器監控)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: employee-management-cadvisor
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8090:8080"
    networks:
      - employee-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  employee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16