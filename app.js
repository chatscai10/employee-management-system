// üöÄ ÈÉ®ÁΩ≤Ëß∏ÁôºÂô® - 2025-08-04T08:00:00.000Z - Force Rebuild: 1754293400000
// üè¢ ÂÆåÊï¥‰ºÅÊ•≠ÁÆ°ÁêÜÁ≥ªÁµ±‰º∫ÊúçÂô® v4.0.0
// ÁúüÊ≠£ÁöÑ‰ºÅÊ•≠Á¥öÂäüËÉΩÂØ¶Áèæ

const express = require('express');
const cors = require('cors');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 8080;

// ‰∏≠‰ªãËªüÈ´îË®≠ÂÆö
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// === Ë≥áÊñôÂ∫´Ê®°Êì¨ (ÂØ¶ÈöõÊáâÁî®‰∏≠Êáâ‰ΩøÁî®ÁúüÂØ¶Ë≥áÊñôÂ∫´) ===
const database = {
    employees: [
        { 
            id: 1, 
            username: 'john.doe', 
            password: 'password123',
            name: 'Á¥ÑÁø∞¬∑Â§ö‰ºä',
            email: 'john@company.com',
            department: 'ITÈÉ®ÈñÄ',
            position: 'ËªüÈ´îÂ∑•Á®ãÂ∏´',
            salary: 60000,
            hireDate: '2023-01-15',
            status: 'active',
            role: 'employee'
        },
        { 
            id: 2, 
            username: 'admin', 
            password: 'admin123',
            name: 'Á≥ªÁµ±ÁÆ°ÁêÜÂì°',
            email: 'admin@company.com',
            department: 'ÁÆ°ÁêÜÈÉ®ÈñÄ',
            position: 'Á≥ªÁµ±ÁÆ°ÁêÜÂì°',
            salary: 80000,
            hireDate: '2022-06-01',
            status: 'active',
            role: 'admin'
        },
        { 
            id: 3, 
            username: 'manager', 
            password: 'manager123',
            name: 'ÈÉ®ÈñÄÁ∂ìÁêÜ',
            email: 'manager@company.com',
            department: 'ÁÆ°ÁêÜÈÉ®ÈñÄ',
            position: 'ÈÉ®ÈñÄÁ∂ìÁêÜ',
            salary: 90000,
            hireDate: '2022-03-10',
            status: 'active',
            role: 'manager'
        }
    ],
    attendance: [
        { id: 1, employeeId: 1, date: '2025-08-04', checkIn: '09:00', checkOut: '18:00', status: 'present' },
        { id: 2, employeeId: 2, date: '2025-08-04', checkIn: '08:30', checkOut: '17:30', status: 'present' }
    ],
    schedules: [
        { id: 1, employeeId: 1, date: '2025-08-05', shift: 'morning', startTime: '09:00', endTime: '18:00' },
        { id: 2, employeeId: 2, date: '2025-08-05', shift: 'morning', startTime: '08:30', endTime: '17:30' }
    ],
    inventory: [
        { id: 1, name: 'Á≠ÜË®òÊú¨ÈõªËÖ¶', category: 'Ëæ¶ÂÖ¨Ë®≠ÂÇô', quantity: 50, price: 25000, supplier: 'Tech Corp' },
        { id: 2, name: 'Ëæ¶ÂÖ¨Ê§Ö', category: 'Ëæ¶ÂÖ¨ÂÆ∂ÂÖ∑', quantity: 20, price: 3500, supplier: 'Furniture Inc' },
        { id: 3, name: 'ÊäïÂΩ±Ê©ü', category: 'ÊúÉË≠∞Ë®≠ÂÇô', quantity: 8, price: 15000, supplier: 'AV Solutions' }
    ],
    orders: [
        { id: 1, employeeId: 1, items: [{ itemId: 1, quantity: 2 }], status: 'pending', date: '2025-08-04' },
        { id: 2, employeeId: 2, items: [{ itemId: 2, quantity: 1 }], status: 'approved', date: '2025-08-03' }
    ],
    maintenanceRequests: [
        { id: 1, employeeId: 1, equipment: 'Âç∞Ë°®Ê©ü', issue: 'Á¥ôÂºµÂç°‰Ωè', status: 'open', priority: 'medium', date: '2025-08-04' },
        { id: 2, employeeId: 2, equipment: 'ÂÜ∑Ê∞£', issue: '‰∏çË£ΩÂÜ∑', status: 'in-progress', priority: 'high', date: '2025-08-03' }
    ],
    promotionVotes: [
        { id: 1, candidateId: 1, voterId: 2, vote: 'approve', comments: 'Ë°®ÁèæÂÑ™ÁßÄ', date: '2025-08-01' }
    ],
    revenue: [
        { id: 1, date: '2025-08-01', amount: 50000, source: 'Áî¢ÂìÅÈä∑ÂîÆ', department: 'ITÈÉ®ÈñÄ' },
        { id: 2, date: '2025-08-02', amount: 30000, source: 'ÊúçÂãôÊî∂ÂÖ•', department: 'ÂÆ¢ÊúçÈÉ®ÈñÄ' }
    ],
        announcements: [
        {
            id: 1,
            title: 'Á≥ªÁµ±Êõ¥Êñ∞ÈÄöÁü•',
            content: '‰ºÅÊ•≠ÁÆ°ÁêÜÁ≥ªÁµ±Â∑≤Êõ¥Êñ∞Ëá≥ v4.0ÔºåÊñ∞Â¢ûÂÖ¨ÂëäÁ≥ªÁµ±„ÄÅÁÖßÁâá‰∏äÂÇ≥Á≠âÂäüËÉΩ„ÄÇ',
            priority: 'high',
            targetRoles: ['admin', 'manager', 'employee'],
            createdAt: '2025-08-06',
            isActive: true
        }
    ],
    uploads: [],
    itemReports: [],
    auditLogs: []
};

// === Ë∫´‰ªΩÈ©óË≠â‰∏≠‰ªãËªüÈ´î ===
function authenticateUser(req, res, next) {
    const authHeader = req.headers.authorization;
    if (!authHeader) {
        return res.status(401).json({ success: false, message: 'ÈúÄË¶ÅË∫´‰ªΩÈ©óË≠â' });
    }
    
    const token = authHeader.split(' ')[1];
    const user = database.employees.find(emp => emp.username === token);
    
    if (!user) {
        return res.status(401).json({ success: false, message: 'ÁÑ°ÊïàÁöÑË™çË≠âË≥áË®ä' });
    }
    
    req.user = user;
    next();
}


// ==================== Ë™çË≠âË∑ØÁî± ====================
// üîê Áî®Êà∂ÁôªÂÖ• API
app.post('/api/auth/login', (req, res) => {
    console.log('[DEBUG] Êî∂Âà∞ÁôªÂÖ•Ë´ãÊ±Ç:', req.body.username);
    const { username, password } = req.body;
    
    if (!username || !password) {
        return res.status(400).json({ 
            success: false, 
            message: 'Ë´ãÊèê‰æõÁî®Êà∂ÂêçÂíåÂØÜÁ¢º' 
        });
    }
    
    // Êü•ÊâæÁî®Êà∂
    const user = database.employees.find(
        emp => emp.username === username && emp.password === password
    );
    
    if (user) {
        // ‰∏çËøîÂõûÂØÜÁ¢º
        const { password: _, ...userInfo } = user;
        res.json({ 
            success: true, 
            message: `Ê≠°ËøéÂõû‰æÜÔºå${user.name}ÔºÅ`,
            user: userInfo,
            token: username // Á∞°ÂåñÁöÑtoken
        });
    } else {
        res.status(401).json({ 
            success: false, 
            message: 'Áî®Êà∂ÂêçÊàñÂØÜÁ¢ºÈåØË™§' 
        });
    }
});

// üîê Áî®Êà∂È©óË≠âAPIÔºàPOSTÊñπÊ≥ïÔºâ
app.post('/api/auth/verify', (req, res) => {
    console.log('[DEBUG] Êî∂Âà∞POSTÈ©óË≠âË´ãÊ±Ç');
    const authHeader = req.headers.authorization;
    
    if (!authHeader) {
        return res.status(401).json({ success: false, message: 'ÈúÄË¶ÅË∫´‰ªΩÈ©óË≠â' });
    }
    
    const token = authHeader.split(' ')[1];
    const user = database.employees.find(emp => emp.username === token);
    
    if (!user) {
        return res.status(401).json({ success: false, message: 'ÁÑ°ÊïàÁöÑË™çË≠âË≥áË®ä' });
    }
    
    const { password: _, ...userInfo } = user;
    res.json({ 
        success: true, 
        user: userInfo,
        message: 'È©óË≠âÊàêÂäü'
    });
});

// üîê Áî®Êà∂È©óË≠âAPIÔºàGETÊñπÊ≥ï - ÂÖºÂÆπÊÄßÔºâ
app.get('/api/auth/verify', (req, res) => {
    console.log('[DEBUG] Êî∂Âà∞GETÈ©óË≠âË´ãÊ±Ç');
    const authHeader = req.headers.authorization;
    
    if (!authHeader) {
        return res.status(401).json({ success: false, message: 'ÈúÄË¶ÅË∫´‰ªΩÈ©óË≠â' });
    }
    
    const token = authHeader.split(' ')[1];
    const user = database.employees.find(emp => emp.username === token);
    
    if (!user) {
        return res.status(401).json({ success: false, message: 'ÁÑ°ÊïàÁöÑË™çË≠âË≥áË®ä' });
    }
    
    const { password: _, ...userInfo } = user;
    res.json({ 
        success: true, 
        user: userInfo,
        message: 'È©óË≠âÊàêÂäü'
    });
});
// ==================== Ë™çË≠âË∑ØÁî±ÁµêÊùü ====================

// ==================== È†ÅÈù¢Ë∑ØÁî± ====================
// È¶ñÈ†ÅË∑ØÁî±
app.get('/', (req, res) => {
    res.redirect('/login');
});

// ÁôªÂÖ•È†ÅÈù¢
app.get('/login', (req, res) => {
    const loginHtml = `<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‰ºÅÊ•≠ÁÆ°ÁêÜÁ≥ªÁµ± - ÁôªÂÖ•</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .login-container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 400px;
        }
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 2rem;
        }
        .form-group {
            margin-bottom: 1.5rem;
        }
        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #555;
            font-weight: 500;
        }
        input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }
        input:focus {
            outline: none;
            border-color: #667eea;
        }
        button {
            width: 100%;
            padding: 1rem;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.3s;
        }
        button:hover {
            background: #5a67d8;
        }
        .error-message {
            color: #e53e3e;
            margin-top: 1rem;
            text-align: center;
            display: none;
        }
        .test-accounts {
            margin-top: 2rem;
            padding: 1rem;
            background: #f7fafc;
            border-radius: 5px;
            font-size: 0.875rem;
        }
        .test-accounts h3 {
            margin-bottom: 0.5rem;
            color: #4a5568;
        }
        .test-accounts p {
            margin: 0.25rem 0;
            color: #718096;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <h1>üè¢ ‰ºÅÊ•≠ÁÆ°ÁêÜÁ≥ªÁµ±</h1>
        <form id="loginForm">
            <div class="form-group">
                <label for="username">Áî®Êà∂ÂêçÁ®±</label>
                <input type="text" id="username" name="username" required autocomplete="username">
            </div>
            <div class="form-group">
                <label for="password">ÂØÜÁ¢º</label>
                <input type="password" id="password" name="password" required autocomplete="current-password">
            </div>
            <button type="submit">ÁôªÂÖ•</button>
        </form>
        <div id="errorMessage" class="error-message"></div>
        
        <div class="test-accounts">
            <h3>Ê∏¨Ë©¶Â∏≥Ëôü</h3>
            <p>üëë ÁÆ°ÁêÜÂì°: admin / admin123</p>
            <p>üëî Á∂ìÁêÜ: manager / manager123</p>
            <p>üë§ Âì°Â∑•: john.doe / password123</p>
        </div>
    </div>

    <script>
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const errorDiv = document.getElementById('errorMessage');
            
            try {
                const response = await fetch('/api/auth/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    localStorage.setItem('userToken', data.token || username);
                    localStorage.setItem('currentUser', JSON.stringify(data.user));
                    window.location.href = '/dashboard';
                } else {
                    errorDiv.textContent = data.message || 'ÁôªÂÖ•Â§±Êïó';
                    errorDiv.style.display = 'block';
                }
            } catch (error) {
                errorDiv.textContent = 'Á∂≤Ë∑ØÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶';
                errorDiv.style.display = 'block';
            }
        });
    </script>
</body>
</html>`;
    res.send(loginHtml);
});

// DashboardÈ†ÅÈù¢
app.get('/dashboard', (req, res) => {
    const dashboardHtml = `<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‰ºÅÊ•≠ÁÆ°ÁêÜÁ≥ªÁµ± - ‰∏ªÊéßÂè∞</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            background: #f5f7fa;
        }
        .header {
            background: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 2rem;
        }
        .modules-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }
        .module-card {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
            cursor: pointer;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .module-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .module-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        .module-title {
            font-size: 1.25rem;
            color: #333;
            margin-bottom: 0.5rem;
        }
        .module-desc {
            color: #666;
            font-size: 0.875rem;
        }
        button {
            padding: 0.5rem 1rem;
            background: #e53e3e;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        button:hover {
            background: #c53030;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üè¢ ‰ºÅÊ•≠ÁÆ°ÁêÜ‰∏ªÊéßÂè∞</h1>
        <div class="user-info">
            <span>üë§ Ê≠°ËøéÔºå<strong id="username">ËºâÂÖ•‰∏≠...</strong></span>
            <button onclick="logout()">ÁôªÂá∫</button>
        </div>
    </div>
    
    <div class="container">
        <h2>ÂäüËÉΩÊ®°ÁµÑ</h2>
        <div class="modules-grid" id="modulesGrid"></div>
    </div>

    <script>
        // Ê™¢Êü•ÁôªÂÖ•ÁãÄÊÖã
        const userToken = localStorage.getItem('userToken');
        const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
        
        if (!userToken) {
            window.location.href = '/login';
        }
        
        // È°ØÁ§∫Áî®Êà∂Âêç
        document.getElementById('username').textContent = currentUser.name || 'Êú™Áü•Áî®Êà∂';
        
        // ÂäüËÉΩÊ®°ÁµÑ
        const modules = [
            { icon: 'üë•', title: 'Âì°Â∑•ÁÆ°ÁêÜ', desc: 'ÁÆ°ÁêÜÂì°Â∑•Ë≥áÊñô', roles: ['admin', 'manager'] },
            { icon: 'üìÖ', title: 'ËÄÉÂã§Ë®òÈåÑ', desc: 'Êü•ÁúãËÄÉÂã§ÁãÄÊÖã', roles: ['admin', 'manager', 'employee'] },
            { icon: 'üóìÔ∏è', title: 'ÊéíÁè≠ÁÆ°ÁêÜ', desc: 'ÂÆâÊéíÂ∑•‰ΩúÁè≠Ê¨°', roles: ['admin', 'manager'] },
            { icon: 'üì¶', title: 'Â∫´Â≠òÁÆ°ÁêÜ', desc: 'ËøΩËπ§Â∫´Â≠òÁãÄÊÖã', roles: ['admin', 'manager'] },
            { icon: 'üõí', title: 'Êé°Ë≥ºÁî≥Ë´ã', desc: 'Êèê‰∫§Êé°Ë≥ºÈúÄÊ±Ç', roles: ['admin', 'manager', 'employee'] },
            { icon: 'üîß', title: 'Á∂≠‰øÆÂ†±Âëä', desc: 'Â†±ÂëäË®≠ÂÇôÂïèÈ°å', roles: ['admin', 'manager', 'employee'] },
            { icon: 'üí∞', title: 'ÁáüÊî∂ÂàÜÊûê', desc: 'Êü•ÁúãÁáüÊî∂Êï∏Êìö', roles: ['admin'] },
            { icon: 'üì¢', title: 'Ë°åÈä∑Ê¥ªÂãï', desc: 'ÁÆ°ÁêÜ‰øÉÈä∑Ê¥ªÂãï', roles: ['admin', 'manager'] }
        ];
        
        // È°ØÁ§∫Ê®°ÁµÑ
        const grid = document.getElementById('modulesGrid');
        modules.forEach(module => {
            if (module.roles.includes(currentUser.role)) {
                const card = document.createElement('div');
                card.className = 'module-card';
                card.innerHTML = \`
                    <div class="module-icon">\${module.icon}</div>
                    <div class="module-title">\${module.title}</div>
                    <div class="module-desc">\${module.desc}</div>
                \`;
                card.onclick = () => handleModuleClick(module.title);
                grid.appendChild(card);
            }
        });
        
        function logout() {
            localStorage.removeItem('userToken');
            localStorage.removeItem('currentUser');
            window.location.href = '/login';
        }
        
        // ËôïÁêÜÊ®°ÁµÑÈªûÊìä
        function handleModuleClick(moduleTitle) {
            const moduleContent = document.getElementById('moduleContent');
            if (!moduleContent) {
                // ÂâµÂª∫Ê®°ÁµÑÂÖßÂÆπÂçÄÂüü
                const container = document.querySelector('.container');
                const contentDiv = document.createElement('div');
                contentDiv.id = 'moduleContent';
                contentDiv.style.marginTop = '2rem';
                container.appendChild(contentDiv);
            }
            
            // Ê†πÊìöÊ®°ÁµÑÈ°ØÁ§∫Â∞çÊáâÂÖßÂÆπ
            switch(moduleTitle) {
                case 'Âì°Â∑•ÁÆ°ÁêÜ':
                    showEmployeeManagement();
                    break;
                case 'ËÄÉÂã§Ë®òÈåÑ':
                    showAttendanceRecords();
                    break;
                case 'ÊéíÁè≠ÁÆ°ÁêÜ':
                    showScheduleManagement();
                    break;
                case 'Â∫´Â≠òÁÆ°ÁêÜ':
                    showInventoryManagement();
                    break;
                case 'Êé°Ë≥ºÁî≥Ë´ã':
                    showPurchaseRequests();
                    break;
                case 'Á∂≠‰øÆÂ†±Âëä':
                    showMaintenanceReports();
                    break;
                case 'ÁáüÊî∂ÂàÜÊûê':
                    showRevenueAnalysis();
                    break;
                case 'Ë°åÈä∑Ê¥ªÂãï':
                    showMarketingCampaigns();
                    break;
                default:
                    alert(`${moduleTitle} ÂäüËÉΩÈñãÁôº‰∏≠...`);
            }
        }
        
        // Âì°Â∑•ÁÆ°ÁêÜÂäüËÉΩ
        function showEmployeeManagement() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üë• Âì°Â∑•ÁÆ°ÁêÜ</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <button onclick="loadEmployees()" style="background: #4299e1; margin-bottom: 1rem;">ËºâÂÖ•Âì°Â∑•ÂàóË°®</button>
                    <div id="employeeList"></div>
                </div>
            `;
            loadEmployees();
        }
        
        async function loadEmployees() {
            try {
                const response = await fetch('/api/employees', {
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                    }
                });
                const data = await response.json();
                
                if (data.success) {
                    const employeeList = document.getElementById('employeeList');
                    employeeList.innerHTML = `
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background: #f7fafc;">
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÂßìÂêç</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÈÉ®ÈñÄ</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ËÅ∑‰Ωç</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÁãÄÊÖã</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.data.map(emp => `
                                    <tr>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${emp.name}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${emp.department}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${emp.position}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
                                            <span style="background: ${emp.status === 'active' ? '#48bb78' : '#f56565'}; color: white; padding: 0.25rem 0.5rem; border-radius: 3px; font-size: 0.875rem;">
                                                ${emp.status === 'active' ? 'Âú®ËÅ∑' : 'Èõ¢ËÅ∑'}
                                            </span>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            } catch (error) {
                console.error('ËºâÂÖ•Âì°Â∑•ÂàóË°®Â§±Êïó:', error);
            }
        }
        
        // ËÄÉÂã§Ë®òÈåÑÂäüËÉΩ
        function showAttendanceRecords() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üìÖ ËÄÉÂã§Ë®òÈåÑ</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <button onclick="checkIn()" style="background: #48bb78; margin-right: 1rem;">Á∞ΩÂà∞</button>
                    <button onclick="loadAttendance()" style="background: #4299e1;">Êü•ÁúãË®òÈåÑ</button>
                    <div id="attendanceList" style="margin-top: 1rem;"></div>
                </div>
            `;
            loadAttendance();
        }
        
        async function checkIn() {
            try {
                const response = await fetch('/api/attendance/checkin', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken'),
                        'Content-Type': 'application/json'
                    }
                });
                const data = await response.json();
                alert(data.message);
                if (data.success) {
                    loadAttendance();
                }
            } catch (error) {
                alert('Á∞ΩÂà∞Â§±Êïó');
            }
        }
        
        async function loadAttendance() {
            try {
                const response = await fetch('/api/attendance', {
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                    }
                });
                const data = await response.json();
                
                if (data.success) {
                    const attendanceList = document.getElementById('attendanceList');
                    attendanceList.innerHTML = `
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background: #f7fafc;">
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Êó•Êúü</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Âì°Â∑•</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Á∞ΩÂà∞ÊôÇÈñì</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Á∞ΩÈÄÄÊôÇÈñì</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÁãÄÊÖã</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.data.map(att => `
                                    <tr>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${att.date}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${att.employeeName}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${att.checkIn || '-'}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${att.checkOut || '-'}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
                                            <span style="background: ${att.status === 'present' ? '#48bb78' : '#f56565'}; color: white; padding: 0.25rem 0.5rem; border-radius: 3px; font-size: 0.875rem;">
                                                ${att.status === 'present' ? 'Âá∫Âã§' : 'Áº∫Âã§'}
                                            </span>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            } catch (error) {
                console.error('ËºâÂÖ•ËÄÉÂã§Ë®òÈåÑÂ§±Êïó:', error);
            }
        }
        
        // Â∫´Â≠òÁÆ°ÁêÜÂäüËÉΩ
        function showInventoryManagement() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üì¶ Â∫´Â≠òÁÆ°ÁêÜ</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <button onclick="loadInventory()" style="background: #4299e1; margin-bottom: 1rem;">ËºâÂÖ•Â∫´Â≠ò</button>
                    <div id="inventoryList"></div>
                </div>
            `;
            loadInventory();
        }
        
        async function loadInventory() {
            try {
                const response = await fetch('/api/inventory', {
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                    }
                });
                const data = await response.json();
                
                if (data.success) {
                    const inventoryList = document.getElementById('inventoryList');
                    inventoryList.innerHTML = `
                        <div style="margin-bottom: 1rem; padding: 1rem; background: #f7fafc; border-radius: 5px;">
                            <strong>Á∏ΩÂ∫´Â≠òÂÉπÂÄº: NT$ ${data.totalValue.toLocaleString()}</strong>
                        </div>
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background: #f7fafc;">
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÂìÅÈ†ÖÂêçÁ®±</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">È°ûÂà•</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Êï∏Èáè</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÂñÆÂÉπ</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">‰æõÊáâÂïÜ</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.data.map(item => `
                                    <tr>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${item.name}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${item.category}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${item.quantity}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">NT$ ${item.price.toLocaleString()}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${item.supplier}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            } catch (error) {
                console.error('ËºâÂÖ•Â∫´Â≠òÂ§±Êïó:', error);
            }
        }
        

        // Ê∑ªÂä†ÂÖ¨ÂëäÂäüËÉΩ
        async function checkAnnouncements() {
            try {
                const response = await fetch('/api/announcements', {
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                    }
                });
                const data = await response.json();
                
                if (data.success && data.data.length > 0) {
                    // Âª∂ÈÅ≤2ÁßíÂæåÈ°ØÁ§∫ÂÖ¨Âëä
                    setTimeout(() => {
                        showAnnouncementModal(data.data);
                    }, 2000);
                }
            } catch (error) {
                console.error('Áç≤ÂèñÂÖ¨ÂëäÂ§±Êïó:', error);
            }
        }
        
        // È°ØÁ§∫ÂÖ¨ÂëäÂΩàÁ™ó
        function showAnnouncementModal(announcements) {
            let currentIndex = 0;
            
            const modal = document.createElement('div');
            modal.style.cssText = 'position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 1000;';
            
            const content = document.createElement('div');
            content.style.cssText = 'background: white; padding: 2rem; border-radius: 10px; max-width: 500px; width: 90%; max-height: 80vh; overflow-y: auto;';
            
            function renderAnnouncement() {
                const ann = announcements[currentIndex];
                content.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <h2 style="margin: 0;">üì¢ ÂÖ¨Âëä</h2>
                        <button onclick="this.parentElement.parentElement.parentElement.parentElement.remove()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer;">√ó</button>
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <span style="background: ${ann.priority === 'high' ? '#e53e3e' : '#4299e1'}; color: white; padding: 0.25rem 0.5rem; border-radius: 3px; font-size: 0.875rem;">
                            ${ann.priority === 'high' ? 'ÈáçË¶Å' : '‰∏ÄËà¨'}
                        </span>
                    </div>
                    <h3>${ann.title}</h3>
                    <p style="line-height: 1.6;">${ann.content}</p>
                    <div style="margin-top: 1.5rem; display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            ${announcements.length > 1 ? `
                                <button onclick="changeAnnouncement(-1)" ${currentIndex === 0 ? 'disabled' : ''} style="margin-right: 0.5rem;">‰∏ä‰∏ÄÂÄã</button>
                                <button onclick="changeAnnouncement(1)" ${currentIndex === announcements.length - 1 ? 'disabled' : ''}>‰∏ã‰∏ÄÂÄã</button>
                            ` : ''}
                        </div>
                        <button onclick="markAsRead(${ann.id}); this.parentElement.parentElement.parentElement.parentElement.remove()">ÈóúÈñâ</button>
                    </div>
                `;
            }
            
            window.changeAnnouncement = function(direction) {
                currentIndex += direction;
                renderAnnouncement();
            };
            
            window.markAsRead = async function(id) {
                try {
                    await fetch(`/api/announcements/${id}/read`, {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                        }
                    });
                } catch (error) {
                    console.error('Ê®ôË®òÂ∑≤ËÆÄÂ§±Êïó:', error);
                }
            };
            
            renderAnnouncement();
            content.appendChild(document.createElement('div'));
            modal.appendChild(content);
            document.body.appendChild(modal);
        }
        
        // Êõ¥Êñ∞Êé°Ë≥ºÁî≥Ë´ãÂäüËÉΩ
        function showPurchaseRequests() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üõí Êé°Ë≥ºÁî≥Ë´ã</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <button onclick="showNewPurchaseForm()" style="background: #48bb78; margin-bottom: 1rem;">Êñ∞Â¢ûÊé°Ë≥ºÁî≥Ë´ã</button>
                    <button onclick="loadPurchaseRequests()" style="background: #4299e1; margin-bottom: 1rem; margin-left: 0.5rem;">Êü•ÁúãÁî≥Ë´ãË®òÈåÑ</button>
                    <div id="purchaseContent"></div>
                </div>
            `;
            loadPurchaseRequests();
        }
        
        function showNewPurchaseForm() {
            const purchaseContent = document.getElementById('purchaseContent');
            purchaseContent.innerHTML = `
                <h4>Êñ∞Â¢ûÊé°Ë≥ºÁî≥Ë´ã</h4>
                <form onsubmit="submitPurchaseRequest(event)" style="margin-top: 1rem;">
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem;">ÈÅ∏ÊìáÁâ©ÂìÅ</label>
                        <select id="itemSelect" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;" required>
                            <option value="">Ë´ãÈÅ∏Êìá...</option>
                        </select>
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem;">Êï∏Èáè</label>
                        <input type="number" id="quantity" min="1" value="1" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;" required>
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem;">‰∏äÂÇ≥Áõ∏ÈóúÁÖßÁâáÔºàÈÅ∏Â°´Ôºâ</label>
                        <input type="file" id="purchasePhoto" accept="image/*" onchange="handlePhotoUpload(event)" style="width: 100%;">
                        <div id="photoPreview" style="margin-top: 0.5rem;"></div>
                    </div>
                    <button type="submit" style="background: #48bb78;">Êèê‰∫§Áî≥Ë´ã</button>
                </form>
            `;
            
            // ËºâÂÖ•Â∫´Â≠òÁâ©ÂìÅÈÅ∏È†Ö
            loadInventoryOptions();
        }
        
        async function loadInventoryOptions() {
            try {
                const response = await fetch('/api/inventory', {
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                    }
                });
                const data = await response.json();
                
                if (data.success) {
                    const select = document.getElementById('itemSelect');
                    data.data.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.id;
                        option.textContent = `${item.name} (Â∫´Â≠ò: ${item.quantity})`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('ËºâÂÖ•Áâ©ÂìÅÈÅ∏È†ÖÂ§±Êïó:', error);
            }
        }
        
        async function handlePhotoUpload(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.getElementById('photoPreview');
                preview.innerHTML = `<img src="${e.target.result}" style="max-width: 200px; max-height: 200px; margin-top: 0.5rem; border-radius: 4px;">`;
                window.uploadedPhoto = {
                    filename: file.name,
                    content: e.target.result
                };
            };
            reader.readAsDataURL(file);
        }
        
        async function submitPurchaseRequest(event) {
            event.preventDefault();
            
            const itemId = document.getElementById('itemSelect').value;
            const quantity = document.getElementById('quantity').value;
            
            // Â¶ÇÊûúÊúâ‰∏äÂÇ≥ÁÖßÁâáÔºåÂÖà‰∏äÂÇ≥
            let photoId = null;
            if (window.uploadedPhoto) {
                try {
                    const uploadResponse = await fetch('/api/upload', {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + localStorage.getItem('userToken'),
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(window.uploadedPhoto)
                    });
                    const uploadData = await uploadResponse.json();
                    if (uploadData.success) {
                        photoId = uploadData.data.id;
                    }
                } catch (error) {
                    console.error('ÁÖßÁâá‰∏äÂÇ≥Â§±Êïó:', error);
                }
            }
            
            try {
                const response = await fetch('/api/orders', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken'),
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        items: [{ itemId: parseInt(itemId), quantity: parseInt(quantity) }],
                        photoId: photoId
                    })
                });
                
                const data = await response.json();
                alert(data.message);
                
                if (data.success) {
                    loadPurchaseRequests();
                }
            } catch (error) {
                alert('Êèê‰∫§Áî≥Ë´ãÂ§±Êïó');
            }
        }
        
        async function loadPurchaseRequests() {
            try {
                const response = await fetch('/api/orders', {
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                    }
                });
                const data = await response.json();
                
                if (data.success) {
                    const purchaseContent = document.getElementById('purchaseContent');
                    purchaseContent.innerHTML = `
                        <h4>Áî≥Ë´ãË®òÈåÑ</h4>
                        <table style="width: 100%; border-collapse: collapse; margin-top: 1rem;">
                            <thead>
                                <tr style="background: #f7fafc;">
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Áî≥Ë´ãÊó•Êúü</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Áî≥Ë´ã‰∫∫</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Áâ©ÂìÅÊòéÁ¥∞</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÁãÄÊÖã</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Êìç‰Ωú</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.data.map(order => `
                                    <tr>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${order.date}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${order.employeeName}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
                                            ${order.items.map(item => `${item.itemName} x ${item.quantity}`).join(', ')}
                                        </td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
                                            <span style="background: ${order.status === 'approved' ? '#48bb78' : '#f59e0b'}; color: white; padding: 0.25rem 0.5rem; border-radius: 3px; font-size: 0.875rem;">
                                                ${order.status === 'approved' ? 'Â∑≤ÊâπÂáÜ' : 'ÂæÖÂØ©Ê†∏'}
                                            </span>
                                        </td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
                                            ${new Date(order.date).getTime() > Date.now() - 3600000 ? 
                                                '<button onclick="alert(\'Á∑®ËºØÂäüËÉΩÈñãÁôº‰∏≠\')">Á∑®ËºØ</button>' : 
                                                '<button onclick="alert(\'‰ΩúÂª¢ÂäüËÉΩÈñãÁôº‰∏≠\')" style="background: #f56565;">‰ΩúÂª¢</button>'
                                            }
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            } catch (error) {
                console.error('ËºâÂÖ•Êé°Ë≥ºÁî≥Ë´ãÂ§±Êïó:', error);
            }
        }
        
        // Êõ¥Êñ∞Á∂≠‰øÆÂ†±ÂëäÂäüËÉΩ
        function showMaintenanceReports() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üîß Á∂≠‰øÆÂ†±Âëä</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <button onclick="showNewMaintenanceForm()" style="background: #f59e0b; margin-bottom: 1rem;">Êèê‰∫§Á∂≠‰øÆÁî≥Ë´ã</button>
                    <button onclick="loadMaintenanceReports()" style="background: #4299e1; margin-bottom: 1rem; margin-left: 0.5rem;">Êü•ÁúãÁ∂≠‰øÆË®òÈåÑ</button>
                    <div id="maintenanceContent"></div>
                </div>
            `;
            loadMaintenanceReports();
        }
        
        function showNewMaintenanceForm() {
            const maintenanceContent = document.getElementById('maintenanceContent');
            maintenanceContent.innerHTML = `
                <h4>Êèê‰∫§Á∂≠‰øÆÁî≥Ë´ã</h4>
                <form onsubmit="submitMaintenanceRequest(event)" style="margin-top: 1rem;">
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem;">Ë®≠ÂÇôÂêçÁ®±</label>
                        <input type="text" id="equipment" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;" required>
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem;">ÂïèÈ°åÊèèËø∞</label>
                        <textarea id="issue" rows="4" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;" required></textarea>
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem;">ÂÑ™ÂÖàÁ¥ö</label>
                        <select id="priority" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;">
                            <option value="low">‰Ωé</option>
                            <option value="medium" selected>‰∏≠</option>
                            <option value="high">È´ò</option>
                        </select>
                    </div>
                    <button type="submit" style="background: #f59e0b;">Êèê‰∫§Áî≥Ë´ã</button>
                </form>
            `;
        }
        
        async function submitMaintenanceRequest(event) {
            event.preventDefault();
            
            try {
                const response = await fetch('/api/maintenance', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken'),
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        equipment: document.getElementById('equipment').value,
                        issue: document.getElementById('issue').value,
                        priority: document.getElementById('priority').value
                    })
                });
                
                const data = await response.json();
                alert(data.message);
                
                if (data.success) {
                    loadMaintenanceReports();
                }
            } catch (error) {
                alert('Êèê‰∫§Áî≥Ë´ãÂ§±Êïó');
            }
        }
        
        async function loadMaintenanceReports() {
            try {
                const response = await fetch('/api/maintenance', {
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('userToken')
                    }
                });
                const data = await response.json();
                
                if (data.success) {
                    const maintenanceContent = document.getElementById('maintenanceContent');
                    maintenanceContent.innerHTML = `
                        <h4>Á∂≠‰øÆË®òÈåÑ</h4>
                        <table style="width: 100%; border-collapse: collapse; margin-top: 1rem;">
                            <thead>
                                <tr style="background: #f7fafc;">
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Áî≥Ë´ãÊó•Êúü</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">Ë®≠ÂÇô</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÂïèÈ°å</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÂÑ™ÂÖàÁ¥ö</th>
                                    <th style="padding: 0.75rem; text-align: left; border-bottom: 1px solid #e2e8f0;">ÁãÄÊÖã</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.data.map(req => `
                                    <tr>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${req.date}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${req.equipment}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">${req.issue}</td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
                                            <span style="background: ${req.priority === 'high' ? '#e53e3e' : req.priority === 'medium' ? '#f59e0b' : '#48bb78'}; color: white; padding: 0.25rem 0.5rem; border-radius: 3px; font-size: 0.875rem;">
                                                ${req.priority === 'high' ? 'È´ò' : req.priority === 'medium' ? '‰∏≠' : '‰Ωé'}
                                            </span>
                                        </td>
                                        <td style="padding: 0.75rem; border-bottom: 1px solid #e2e8f0;">
                                            <span style="background: ${req.status === 'open' ? '#f59e0b' : req.status === 'in-progress' ? '#4299e1' : '#48bb78'}; color: white; padding: 0.25rem 0.5rem; border-radius: 3px; font-size: 0.875rem;">
                                                ${req.status === 'open' ? 'ÂæÖËôïÁêÜ' : req.status === 'in-progress' ? 'ËôïÁêÜ‰∏≠' : 'Â∑≤ÂÆåÊàê'}
                                            </span>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;
                }
            } catch (error) {
                console.error('ËºâÂÖ•Á∂≠‰øÆË®òÈåÑÂ§±Êïó:', error);
            }
        }
        
        // È†ÅÈù¢ËºâÂÖ•ÂæåÊ™¢Êü•ÂÖ¨Âëä
        checkAnnouncements();
        
        // ÂÖ∂‰ªñÂäüËÉΩÂÖàÈ°ØÁ§∫ÈñãÁôº‰∏≠Ë®äÊÅØ
        function showScheduleManagement() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üóìÔ∏è ÊéíÁè≠ÁÆ°ÁêÜ</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <p>ÊéíÁè≠ÁÆ°ÁêÜÂäüËÉΩÊ≠£Âú®ÈñãÁôº‰∏≠...</p>
                </div>
            `;
        }
        
        function showPurchaseRequests() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üõí Êé°Ë≥ºÁî≥Ë´ã</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <p>Êé°Ë≥ºÁî≥Ë´ãÂäüËÉΩÊ≠£Âú®ÈñãÁôº‰∏≠...</p>
                </div>
            `;
        }
        
        function showMaintenanceReports() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üîß Á∂≠‰øÆÂ†±Âëä</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <p>Á∂≠‰øÆÂ†±ÂëäÂäüËÉΩÊ≠£Âú®ÈñãÁôº‰∏≠...</p>
                </div>
            `;
        }
        
        function showRevenueAnalysis() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üí∞ ÁáüÊî∂ÂàÜÊûê</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <p>ÁáüÊî∂ÂàÜÊûêÂäüËÉΩÊ≠£Âú®ÈñãÁôº‰∏≠...</p>
                </div>
            `;
        }
        
        function showMarketingCampaigns() {
            const content = document.getElementById('moduleContent');
            content.innerHTML = `
                <h3>üì¢ Ë°åÈä∑Ê¥ªÂãï</h3>
                <div style="background: white; padding: 1.5rem; border-radius: 10px; margin-top: 1rem;">
                    <p>Ë°åÈä∑Ê¥ªÂãïÂäüËÉΩÊ≠£Âú®ÈñãÁôº‰∏≠...</p>
                </div>
            `;
        }
    </script>
</body>
</html>`;
    res.send(dashboardHtml);
});
// ==================== È†ÅÈù¢Ë∑ØÁî±ÁµêÊùü ====================

// Á≥ªÁµ±ÁãÄÊÖã API
app.get('/api/system/status', (req, res) => {
    res.json({
        success: true,
        system: {
            version: '4.0.0',
            status: 'operational',
            uptime: process.uptime(),
            timestamp: new Date().toISOString(),
            modules: {
                authentication: 'active',
                employeeManagement: 'active',
                attendanceTracking: 'active',
                scheduling: 'active',
                inventory: 'active',
                maintenance: 'active',
                revenue: 'active',
                promotion: 'active'
            }
        },
        database: {
            employees: database.employees.length,
            attendance: database.attendance.length,
            schedules: database.schedules.length,
            inventory: database.inventory.length,
            orders: database.orders.length,
            maintenanceRequests: database.maintenanceRequests.length,
            revenue: database.revenue.length
        }
    });
});

// Âì°Â∑•ÁÆ°ÁêÜ API
app.get('/api/employees', authenticateUser, (req, res) => {
    // ÁßªÈô§ÂØÜÁ¢ºÊ¨Ñ‰Ωç
    const employees = database.employees.map(emp => {
        const { password, ...employeeInfo } = emp;
        return employeeInfo;
    });
    
    res.json({
        success: true,
        data: employees,
        count: employees.length
    });
});

app.get('/api/employees/:id', authenticateUser, (req, res) => {
    const employee = database.employees.find(emp => emp.id === parseInt(req.params.id));
    if (employee) {
        const { password, ...employeeInfo } = employee;
        res.json({ success: true, data: employeeInfo });
    } else {
        res.status(404).json({ success: false, message: 'Âì°Â∑•‰∏çÂ≠òÂú®' });
    }
});

// ËÄÉÂã§ÁÆ°ÁêÜ API
app.get('/api/attendance', authenticateUser, (req, res) => {
    let attendance = database.attendance;
    
    // Â¶ÇÊûúÊòØ‰∏ÄËà¨Âì°Â∑•ÔºåÂè™ËÉΩÊü•ÁúãËá™Â∑±ÁöÑËÄÉÂã§
    if (req.user.role === 'employee') {
        attendance = attendance.filter(att => att.employeeId === req.user.id);
    }
    
    // Ë£úÂÖÖÂì°Â∑•ÂßìÂêçË≥áË®ä
    const attendanceWithNames = attendance.map(att => {
        const employee = database.employees.find(emp => emp.id === att.employeeId);
        return {
            ...att,
            employeeName: employee ? employee.name : 'Êú™Áü•Âì°Â∑•'
        };
    });
    
    res.json({
        success: true,
        data: attendanceWithNames,
        count: attendanceWithNames.length
    });
});

app.post('/api/attendance/checkin', authenticateUser, (req, res) => {
    const today = new Date().toISOString().split('T')[0];
    const existingRecord = database.attendance.find(att => 
        att.employeeId === req.user.id && att.date === today
    );
    
    if (existingRecord) {
        res.status(400).json({ success: false, message: '‰ªäÊó•Â∑≤Á∞ΩÂà∞' });
        return;
    }
    
    const newAttendance = {
        id: database.attendance.length + 1,
        employeeId: req.user.id,
        date: today,
        checkIn: new Date().toTimeString().split(' ')[0].substring(0, 5),
        checkOut: null,
        status: 'checked-in'
    };
    
    database.attendance.push(newAttendance);
    res.json({ success: true, message: 'Á∞ΩÂà∞ÊàêÂäü', data: newAttendance });
});

// ÊéíÁè≠Á≥ªÁµ± API
app.get('/api/schedules', authenticateUser, (req, res) => {
    let schedules = database.schedules;
    
    if (req.user.role === 'employee') {
        schedules = schedules.filter(sch => sch.employeeId === req.user.id);
    }
    
    const schedulesWithNames = schedules.map(sch => {
        const employee = database.employees.find(emp => emp.id === sch.employeeId);
        return {
            ...sch,
            employeeName: employee ? employee.name : 'Êú™Áü•Âì°Â∑•'
        };
    });
    
    res.json({
        success: true,
        data: schedulesWithNames,
        count: schedulesWithNames.length
    });
});

// Â∫´Â≠òÁÆ°ÁêÜ API
app.get('/api/inventory', authenticateUser, (req, res) => {
    res.json({
        success: true,
        data: database.inventory,
        count: database.inventory.length,
        totalValue: database.inventory.reduce((sum, item) => sum + (item.quantity * item.price), 0)
    });
});

// Êé°Ë≥ºÁî≥Ë´ã API
app.get('/api/orders', authenticateUser, (req, res) => {
    let orders = database.orders;
    
    if (req.user.role === 'employee') {
        orders = orders.filter(order => order.employeeId === req.user.id);
    }
    
    const ordersWithDetails = orders.map(order => {
        const employee = database.employees.find(emp => emp.id === order.employeeId);
        const orderItems = order.items.map(item => {
            const inventoryItem = database.inventory.find(inv => inv.id === item.itemId);
            return {
                ...item,
                itemName: inventoryItem ? inventoryItem.name : 'Êú™Áü•Áâ©ÂìÅ',
                unitPrice: inventoryItem ? inventoryItem.price : 0
            };
        });
        
        return {
            ...order,
            employeeName: employee ? employee.name : 'Êú™Áü•Âì°Â∑•',
            items: orderItems
        };
    });
    
    res.json({
        success: true,
        data: ordersWithDetails,
        count: ordersWithDetails.length
    });
});

app.post('/api/orders', authenticateUser, (req, res) => {
    const { items } = req.body;
    
    if (!items || !Array.isArray(items) || items.length === 0) {
        res.status(400).json({ success: false, message: 'Ë´ãÈÅ∏ÊìáË¶ÅÁî≥Ë´ãÁöÑÁâ©ÂìÅ' });
        return;
    }
    
    const newOrder = {
        id: database.orders.length + 1,
        employeeId: req.user.id,
        items: items,
        status: 'pending',
        date: new Date().toISOString().split('T')[0],
        createdBy: req.user.name
    };
    
    database.orders.push(newOrder);
    res.json({ success: true, message: 'Áî≥Ë´ãÊèê‰∫§ÊàêÂäü', data: newOrder });
});

// Á∂≠‰øÆÁî≥Ë´ã API
app.get('/api/maintenance', authenticateUser, (req, res) => {
    let requests = database.maintenanceRequests;
    
    if (req.user.role === 'employee') {
        requests = requests.filter(req => req.employeeId === req.user.id);
    }
    
    const requestsWithNames = requests.map(req => {
        const employee = database.employees.find(emp => emp.id === req.employeeId);
        return {
            ...req,
            employeeName: employee ? employee.name : 'Êú™Áü•Âì°Â∑•'
        };
    });
    
    res.json({
        success: true,
        data: requestsWithNames,
        count: requestsWithNames.length
    });
});

app.post('/api/maintenance', authenticateUser, (req, res) => {
    const { equipment, issue, priority = 'medium' } = req.body;
    
    if (!equipment || !issue) {
        res.status(400).json({ success: false, message: 'Ë´ãÂ°´ÂØ´Ë®≠ÂÇôÂêçÁ®±ÂíåÂïèÈ°åÊèèËø∞' });
        return;
    }
    
    const newRequest = {
        id: database.maintenanceRequests.length + 1,
        employeeId: req.user.id,
        equipment: equipment,
        issue: issue,
        priority: priority,
        status: 'open',
        date: new Date().toISOString().split('T')[0],
        createdBy: req.user.name
    };
    
    database.maintenanceRequests.push(newRequest);
    res.json({ success: true, message: 'Á∂≠‰øÆÁî≥Ë´ãÊèê‰∫§ÊàêÂäü', data: newRequest });
});

// ÁáüÊî∂ÂàÜÊûê API
app.get('/api/revenue', authenticateUser, (req, res) => {
    if (req.user.role !== 'admin' && req.user.role !== 'manager') {
        res.status(403).json({ success: false, message: 'Ê¨äÈôê‰∏çË∂≥ÔºåÁÑ°Ê≥ïÊü•ÁúãÁáüÊî∂Ë≥áÊñô' });
        return;
    }
    
    const totalRevenue = database.revenue.reduce((sum, rev) => sum + rev.amount, 0);
    const monthlyRevenue = database.revenue.filter(rev => {
        const revDate = new Date(rev.date);
        const currentMonth = new Date().getMonth();
        return revDate.getMonth() === currentMonth;
    });
    
    res.json({
        success: true,
        data: database.revenue,
        count: database.revenue.length,
        totalRevenue: totalRevenue,
        monthlyRevenue: monthlyRevenue.reduce((sum, rev) => sum + rev.amount, 0)
    });
});


// ==================== ÂÖ¨ÂëäÁ≥ªÁµ± API ====================
// Áç≤ÂèñÂÖ¨ÂëäÂàóË°®
app.get('/api/announcements', authenticateUser, (req, res) => {
    const activeAnnouncements = database.announcements.filter(ann => 
        ann.isActive && ann.targetRoles.includes(req.user.role)
    );
    
    res.json({
        success: true,
        data: activeAnnouncements,
        count: activeAnnouncements.length
    });
});

// Ê®ôË®òÂÖ¨ÂëäÂ∑≤ËÆÄ
app.post('/api/announcements/:id/read', authenticateUser, (req, res) => {
    const announcementId = parseInt(req.params.id);
    const userId = req.user.id;
    
    // ÈÄôË£°ÊáâË©≤Ë®òÈåÑÂ∑≤ËÆÄÁãÄÊÖãÔºåÁ∞°ÂåñËôïÁêÜ
    res.json({
        success: true,
        message: 'ÂÖ¨ÂëäÂ∑≤Ê®ôË®òÁÇ∫Â∑≤ËÆÄ'
    });
});

// ÁÆ°ÁêÜÂì°Áç≤ÂèñÊâÄÊúâÂÖ¨Âëä
app.get('/api/admin/announcements', authenticateUser, (req, res) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ success: false, message: 'Ê¨äÈôê‰∏çË∂≥' });
    }
    
    res.json({
        success: true,
        data: database.announcements,
        count: database.announcements.length
    });
});

// ÂâµÂª∫Êñ∞ÂÖ¨Âëä
app.post('/api/admin/announcements', authenticateUser, (req, res) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ success: false, message: 'Ê¨äÈôê‰∏çË∂≥' });
    }
    
    const { title, content, priority, targetRoles } = req.body;
    
    const newAnnouncement = {
        id: database.announcements.length + 1,
        title,
        content,
        priority: priority || 'normal',
        targetRoles: targetRoles || ['admin', 'manager', 'employee'],
        createdAt: new Date().toISOString().split('T')[0],
        isActive: true,
        createdBy: req.user.name
    };
    
    database.announcements.push(newAnnouncement);
    
    res.json({
        success: true,
        message: 'ÂÖ¨ÂëäÂâµÂª∫ÊàêÂäü',
        data: newAnnouncement
    });
});

// Êõ¥Êñ∞ÂÖ¨Âëä
app.put('/api/admin/announcements/:id', authenticateUser, (req, res) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ success: false, message: 'Ê¨äÈôê‰∏çË∂≥' });
    }
    
    const announcementId = parseInt(req.params.id);
    const announcement = database.announcements.find(ann => ann.id === announcementId);
    
    if (!announcement) {
        return res.status(404).json({ success: false, message: 'ÂÖ¨Âëä‰∏çÂ≠òÂú®' });
    }
    
    Object.assign(announcement, req.body);
    
    res.json({
        success: true,
        message: 'ÂÖ¨ÂëäÊõ¥Êñ∞ÊàêÂäü',
        data: announcement
    });
});

// Âà™Èô§ÂÖ¨Âëä
app.delete('/api/admin/announcements/:id', authenticateUser, (req, res) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ success: false, message: 'Ê¨äÈôê‰∏çË∂≥' });
    }
    
    const announcementId = parseInt(req.params.id);
    const index = database.announcements.findIndex(ann => ann.id === announcementId);
    
    if (index === -1) {
        return res.status(404).json({ success: false, message: 'ÂÖ¨Âëä‰∏çÂ≠òÂú®' });
    }
    
    database.announcements.splice(index, 1);
    
    res.json({
        success: true,
        message: 'ÂÖ¨ÂëäÂà™Èô§ÊàêÂäü'
    });
});
// ==================== ÂÖ¨ÂëäÁ≥ªÁµ± API ÁµêÊùü ====================

// ==================== Ê™îÊ°à‰∏äÂÇ≥ API ====================
// ‰∏äÂÇ≥Ê™îÊ°à
app.post('/api/upload', authenticateUser, (req, res) => {
    const { filename, content, type } = req.body;
    
    if (!filename || !content) {
        return res.status(400).json({ success: false, message: 'Áº∫Â∞ëÊ™îÊ°àË≥áË®ä' });
    }
    
    const newUpload = {
        id: database.uploads.length + 1,
        filename,
        type: type || 'image/jpeg',
        content, // Base64
        uploadedBy: req.user.id,
        uploadedAt: new Date().toISOString(),
        size: content.length
    };
    
    database.uploads.push(newUpload);
    
    res.json({
        success: true,
        message: 'Ê™îÊ°à‰∏äÂÇ≥ÊàêÂäü',
        data: {
            id: newUpload.id,
            filename: newUpload.filename,
            uploadedAt: newUpload.uploadedAt
        }
    });
});

// Áç≤ÂèñÊ™îÊ°à
app.get('/api/uploads/:id', authenticateUser, (req, res) => {
    const uploadId = parseInt(req.params.id);
    const upload = database.uploads.find(up => up.id === uploadId);
    
    if (!upload) {
        return res.status(404).json({ success: false, message: 'Ê™îÊ°à‰∏çÂ≠òÂú®' });
    }
    
    res.json({
        success: true,
        data: upload
    });
});
// ==================== Ê™îÊ°à‰∏äÂÇ≥ API ÁµêÊùü ====================

// ==================== ÂìÅÈ†ÖÁï∞Â∏∏ÂõûÂ†± API ====================
// Êèê‰∫§Áï∞Â∏∏ÂõûÂ†±
app.post('/api/item-reports', authenticateUser, (req, res) => {
    const { itemId, reportType, description, photoIds, affectedItems } = req.body;
    
    if (!itemId || !reportType || !description) {
        return res.status(400).json({ 
            success: false, 
            message: 'Ë´ãÂ°´ÂØ´ÂøÖË¶ÅÁöÑÂõûÂ†±Ë≥áË®ä' 
        });
    }
    
    const newReport = {
        id: database.itemReports.length + 1,
        itemId,
        reportType, // 'excess', 'shortage', 'damaged', 'expired', 'other'
        description,
        photoIds: photoIds || [],
        affectedItems: affectedItems || [],
        reportedBy: req.user.id,
        reportedAt: new Date().toISOString(),
        status: 'pending',
        department: req.user.department
    };
    
    database.itemReports.push(newReport);
    
    // Ë®òÈåÑÂà∞ÂØ©Ë®àÊó•Ë™å
    database.auditLogs.push({
        id: database.auditLogs.length + 1,
        action: 'item_report_created',
        userId: req.user.id,
        details: `ÂìÅÈ†ÖÁï∞Â∏∏ÂõûÂ†±: ${reportType}`,
        timestamp: new Date().toISOString()
    });
    
    res.json({
        success: true,
        message: 'Áï∞Â∏∏ÂõûÂ†±Êèê‰∫§ÊàêÂäü',
        data: newReport
    });
});

// Áç≤ÂèñÁï∞Â∏∏ÂõûÂ†±ÂàóË°®
app.get('/api/item-reports', authenticateUser, (req, res) => {
    let reports = database.itemReports;
    
    // ‰∏ÄËà¨Âì°Â∑•Âè™ËÉΩÁúãËá™Â∑±ÁöÑÂõûÂ†±
    if (req.user.role === 'employee') {
        reports = reports.filter(report => report.reportedBy === req.user.id);
    }
    
    // Ë£úÂÖÖÂì°Â∑•Ë≥áË®ä
    const reportsWithDetails = reports.map(report => {
        const reporter = database.employees.find(emp => emp.id === report.reportedBy);
        return {
            ...report,
            reporterName: reporter ? reporter.name : 'Êú™Áü•Âì°Â∑•',
            reportTypeName: getReportTypeName(report.reportType)
        };
    });
    
    res.json({
        success: true,
        data: reportsWithDetails,
        count: reportsWithDetails.length
    });
});

// ËºîÂä©ÂáΩÊï∏
function getReportTypeName(type) {
    const types = {
        'excess': 'Êï∏ÈáèÈÅéÂ§ö',
        'shortage': 'Êï∏Èáè‰∏çË∂≥',
        'damaged': 'Áâ©ÂìÅÊêçÂ£û',
        'expired': 'Áâ©ÂìÅÈÅéÊúü',
        'other': 'ÂÖ∂‰ªñÂïèÈ°å'
    };
    return types[type] || 'Êú™Áü•È°ûÂûã';
}
// ==================== ÂìÅÈ†ÖÁï∞Â∏∏ÂõûÂ†± API ÁµêÊùü ====================

// ÂçáÈÅ∑ÊäïÁ•® API
app.get('/api/promotion-votes', authenticateUser, (req, res) => {
    if (req.user.role !== 'admin' && req.user.role !== 'manager') {
        res.status(403).json({ success: false, message: 'Ê¨äÈôê‰∏çË∂≥' });
        return;
    }
    
    const votesWithNames = database.promotionVotes.map(vote => {
        const candidate = database.employees.find(emp => emp.id === vote.candidateId);
        const voter = database.employees.find(emp => emp.id === vote.voterId);
        return {
            ...vote,
            candidateName: candidate ? candidate.name : 'Êú™Áü•ÂÄôÈÅ∏‰∫∫',
            voterName: voter ? voter.name : 'Êú™Áü•ÊäïÁ•®‰∫∫'
        };
    });
    
    res.json({
        success: true,
        data: votesWithNames,
        count: votesWithNames.length
    });
});

// ÁÆ°ÁêÜ‰∏ªÊéßÂè∞Ë∑ØÁî±
// üîê Áî®Êà∂È©óË≠â‰∏≠‰ªãËªüÈ´î
function authenticateUser(req, res, next) {
    const authHeader = req.headers.authorization;
    if (!authHeader) {
        return res.redirect('/login');
    }
    
    const token = authHeader.split(' ')[1];
    const user = database.employees.find(emp => emp.username === token);
    
    if (!user) {
        return res.redirect('/login');
    }
    
    req.user = user;
    next();
}



// API ÊñáÊ™îË∑ØÁî±
app.get('/api/docs', (req, res) => {
    const apiDocs = {
        version: '4.0.0',
        title: '‰ºÅÊ•≠ÁÆ°ÁêÜÁ≥ªÁµ± API ÊñáÊ™î',
        description: 'ÂÆåÊï¥ÁöÑ‰ºÅÊ•≠ÁÆ°ÁêÜÂäüËÉΩ API',
        endpoints: {
            authentication: {
                'POST /api/auth/login': 'Áî®Êà∂ÁôªÂÖ•'
            },
            system: {
                'GET /api/system/status': 'Á≥ªÁµ±ÁãÄÊÖãÊü•Ë©¢'
            },
            employees: {
                'GET /api/employees': 'Âì°Â∑•ÂàóË°®Êü•Ë©¢',
                'GET /api/employees/:id': 'ÂñÆ‰∏ÄÂì°Â∑•Êü•Ë©¢'
            },
            attendance: {
                'GET /api/attendance': 'ËÄÉÂã§Ë®òÈåÑÊü•Ë©¢',
                'POST /api/attendance/checkin': 'Âì°Â∑•Á∞ΩÂà∞'
            },
            scheduling: {
                'GET /api/schedules': 'ÊéíÁè≠Êü•Ë©¢'
            },
            inventory: {
                'GET /api/inventory': 'Â∫´Â≠òÊü•Ë©¢'
            },
            orders: {
                'GET /api/orders': 'Êé°Ë≥ºÁî≥Ë´ãÊü•Ë©¢',
                'POST /api/orders': 'Êèê‰∫§Êé°Ë≥ºÁî≥Ë´ã'
            },
            maintenance: {
                'GET /api/maintenance': 'Á∂≠‰øÆÁî≥Ë´ãÊü•Ë©¢',
                'POST /api/maintenance': 'Êèê‰∫§Á∂≠‰øÆÁî≥Ë´ã'
            },
            revenue: {
                'GET /api/revenue': 'ÁáüÊî∂ÂàÜÊûêÊü•Ë©¢'
            },
            promotion: {
                'GET /api/promotion-votes': 'ÂçáÈÅ∑ÊäïÁ•®Êü•Ë©¢'
            }
        }
    };
    
    res.json(apiDocs);
});

// ÂÅ•Â∫∑Ê™¢Êü•
app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy', 
        version: '4.0.0', 
        timestamp: new Date().toISOString(),
        message: '‰ºÅÊ•≠ÁÆ°ÁêÜÁ≥ªÁµ±ÈÅãË°åÊ≠£Â∏∏'
    });
});

// 404 ËôïÁêÜ
app.use('*', (req, res) => {
    res.status(404).json({ 
        success: false, 
        message: 'Á´ØÈªûÊú™ÊâæÂà∞',
        availableEndpoints: [
            'GET /',
            'GET /login',
            'GET /dashboard',
            'GET /health',
            'POST /api/auth/login',
            'POST /api/auth/verify',
            'GET /api/system/status',
            'GET /api/employees',
            'GET /api/attendance',
            'GET /api/inventory',
            'GET /api/maintenance',
            'GET /api/docs'
        ]
    });
});


// ÁâàÊú¨Ê™¢Êü•Á´ØÈªû
app.get('/api/version', (req, res) => {
    const buildInfo = {
        version: '2025-08-04T11:56:52.173Z',
        commit: process.env.GIT_COMMIT || 'unknown',
        buildTime: new Date().toISOString(),
        nodeVersion: process.version,
        environment: process.env.NODE_ENV || 'development'
    };
    res.json(buildInfo);
});

// Â§öÂπ≥Âè∞Á´ØÂè£ÈÖçÁΩÆÂÑ™Âåñ
// Â§öÂπ≥Âè∞ÂÑ™ÂåñÁöÑÊúçÂãôÂô®ÂïüÂãï
const server = 
// üêõ Ë™øË©¶Ë∑ØÁî± - È°ØÁ§∫ÊâÄÊúâË®ªÂÜäÁöÑË∑ØÁî±
app.get('/api/debug/routes', (req, res) => {
    const routes = [];
    app._router.stack.forEach(middleware => {
        if (middleware.route) {
            const methods = Object.keys(middleware.route.methods);
            routes.push({
                path: middleware.route.path,
                methods: methods
            });
        }
    });
    res.json({
        success: true,
        message: 'Ë®ªÂÜäÁöÑË∑ØÁî±ÂàóË°®',
        routes: routes,
        total: routes.length
    });
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`\nüéâ ‰ºÅÊ•≠ÁÆ°ÁêÜÁ≥ªÁµ± v4.0.0 Â∑≤ÊàêÂäüÂïüÂãïÔºÅ`);
    console.log(`üåê ÊúçÂãôÂú∞ÂùÄ: http://localhost:${PORT}`);
    console.log(`üìä Á≥ªÁµ±ÁãÄÊÖã: http://localhost:${PORT}/api/system/status`);
    console.log(`üîê ÁôªÂÖ•È†ÅÈù¢: http://localhost:${PORT}/login`);
    console.log(`üè† ÁÆ°ÁêÜ‰∏ªÊéßÂè∞: http://localhost:${PORT}/dashboard`);
    console.log(`üìñ API ÊñáÊ™î: http://localhost:${PORT}/api/docs`);
    console.log(`üíö ÂÅ•Â∫∑Ê™¢Êü•: http://localhost:${PORT}/health`);
    console.log(`\n‚úÖ ÊâÄÊúâ‰ºÅÊ•≠ÂäüËÉΩÊ®°ÁµÑÂ∑≤ÂïüÁî®‰∏¶ÂèØÊ≠£Â∏∏‰ΩøÁî®`);
    console.log(`üöÄ Ê∫ñÂÇôÊé•Âèó‰ºÅÊ•≠ÁÆ°ÁêÜË´ãÊ±Ç...\n`);
    
    // Âπ≥Âè∞ÁâπÂÆöÂÑ™Âåñ
    if (process.env.RAILWAY_ENVIRONMENT) {
        console.log('üöÇ RailwayÂπ≥Âè∞Ê®°ÂºèÂ∑≤ÂïüÁî®');
    } else if (process.env.VERCEL) {
        console.log('‚ö° VercelÁÑ°ÊúçÂãôÂô®Ê®°ÂºèÂ∑≤ÂïüÁî®');
    } else if (process.env.RENDER) {
        console.log('üé® RenderÂπ≥Âè∞Ê®°ÂºèÂ∑≤ÂïüÁî®');
    }
});

// ÂÑ™ÈõÖÈóúÈñâËôïÁêÜ
process.on('SIGTERM', () => {
    console.log('\nüì¥ Êî∂Âà∞ÈóúÈñâ‰ø°ËôüÔºåÈñãÂßãÂÑ™ÈõÖÈóúÈñâÊúçÂãô...');
    server.close(() => {
        console.log('‚úÖ HTTPÊúçÂãôÂô®Â∑≤ÂÆâÂÖ®ÈóúÈñâ');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('\nüì¥ Êî∂Âà∞‰∏≠Êñ∑‰ø°ËôüÔºåÈñãÂßãÂÑ™ÈõÖÈóúÈñâÊúçÂãô...');
    server.close(() => {
        console.log('‚úÖ HTTPÊúçÂãôÂô®Â∑≤ÂÆâÂÖ®ÈóúÈñâ');
        process.exit(0);
    });
});

// Â∞éÂá∫app‰æõVercel‰ΩøÁî®
module.exports = app;